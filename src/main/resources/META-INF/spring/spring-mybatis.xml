<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
       	http://www.springframework.org/schema/beans
       	http://www.springframework.org/schema/beans/spring-beans.xsd
       	http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd
       	">
	<!-- dataSource -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" lazy-init="true">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat，日志用的filter:slf4j，防御sql注入的filter:wall -->
		<property name="filters" value="wall" />
		<!-- 最大连接池数量 -->
		<property name="maxActive" value="${jdbc.maxActive}" />
		<!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<!-- 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。 -->
		<property name="maxWait" value="${jdbc.maxWait}" />
		<!-- 最小连接池数量 -->
		<property name="minIdle" value="${jdbc.minIdle}" />
		<!-- 有两个含义：1) Destroy线程会检测连接的间隔时间	2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明 -->
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
		<!-- Destory线程中如果检测到当前连接的最后活跃时间和当前时间的差值大于minEvictableIdleTimeMillis，则关闭当前连接。 -->
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用 -->
		<property name="validationQuery" value="select 1 from dual" />
		<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="true" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
		<property name="testOnBorrow" value="false" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
		<property name="testOnReturn" value="false" />
		<!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。5.5及以上版本有PSCache，建议开启。 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${jdbc.maxPoolPreparedStatementPerConnectionSize}" />
	</bean>
	<!-- dataSource -->

	<!-- mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" lazy-init="true">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:META-INF/mybatis/mybatis-config.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath*:META-INF/mybatis/mapper/*Mapper.xml</value>
			</list>
		</property>
	</bean>

	<!-- 配置Mybatis模版 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate"
		lazy-init="true">
		<constructor-arg index="0" ref="sqlSessionFactory" />
		<!-- 执行方式，SIMPLE, REUSE, BATCH <constructor-arg index="1" value="BATCH" /> -->
	</bean>
	<!-- mybatis -->

	<!-- dao 配置 -->
	<bean id="kettleJobDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="cn.kettle.scheduler.dao.KettleJobDao" />
        <property name="sqlSessionTemplate" ref="sqlSessionTemplate" />
    </bean>
	<bean id="kettleJobParamsDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="cn.kettle.scheduler.dao.KettleJobParamsDao" />
        <property name="sqlSessionTemplate" ref="sqlSessionTemplate" />
    </bean>
	<bean id="kettleJobRunLogDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="cn.kettle.scheduler.dao.KettleJobRunLogDao" />
        <property name="sqlSessionTemplate" ref="sqlSessionTemplate" />
    </bean>
</beans>
